from tkinter import *
# and import messagebox as mb from tkinter
from tkinter import messagebox as mb

# import json to use json file for data
import json

# class to define the components of the GUI
class Quiz:
  def __init__(self):
    # set question number to 0
    self. qNo = 0
    
    # assigns ques to the display_question function pointer on to update later.
    self.displayTitle()
    self.displayQ()
    
    # opt_selected holds an integer value which is used for selected option in a
    question.
    self.select = IntVar()
    
    # Displaying radio button for the current question and used to display options
    for the current question
    self.opts = self.radioButtons()
    
    # display options for the current question
    self.displayOpt()
    
    # displays the button for next and exit.
    self.buttons()
    
    # no of questions
    self.Qsize = len(question)
    
    # keep a counter of correct answers
    self.correct = 0
    
  # This method is used to display the result
  # It counts the number of correct and wrong answers and then display them at the
    end as a message Box   
  def displayResult(self):
  
    # calculates the wrong count
    wrongCnt = self.Qsize - self.correct
    correct = f"Correct : {self.correct}"
    wrong = f"Wrong : {wrongCnt}"
    
    # calcultaes the percentage of correct answers
    score = int(self.correct / self.Qsize * 100)
    result = f"Score: {score}%"
    
    # Shows a message box to display the result
    mb.showinfo("Result", f"{result}\n{correct}\n{wrong}")
   
  # This method checks the Answer after we click on Next.
  def checkAns(self, qNo):
  
    # checks for if the selected option is correct
    if self.select.get() == answer[qNo]:
    # if the option is correct it return true
      return True
      
    # This method is used to check the answer of the
    # current question by calling the check_ans and question no.
    # if the question is correct it increases the count by 1
    # and then increase the question number by 1. If it is last
    # question then it calls display result to show the message box.
    # otherwise shows next question.
  def nextBtn(self):
  
    # Check if the answer is correct
    if self.checkAns(self.qNo):
    # if the answer is correct it increments the correct by 1
      self.correct += 1
    # Moves to next Question by incrementing the q_no counter
    self.qNo += 1
    
    # checks if the q_no size is equal to the data size
    # For last question
    if self.qNo == self.Qsize:
    #displays the score
      self.displayResult()
      # destroys the GUI / Exit
      root.destroy()
    else:
      # shows the next question
      self.displayQ()
      self.displayOpt()

  # This method shows the two buttons on the screen.
  # The first one is the next_button which moves to next question
  # It has properties like what text it shows the functionality, size, color, and property
    of text displayed on button.
  # Then it mentions where to place the button on the screen.
  # The second button is the exit button which is used to close the GUI without
    completing the quiz.
    
    def buttons(self):
      # 1) The first button is the Next button to move to the next Question
      next = Button(root, text="Next", command=self.nextBtn, width=10, bg="blue",
      fg="white", font=("ariel", 16, "bold"))
      # placing the button on the screen
      next.place(x=350, y=380)
      
      # 2) This is the second button which is used to Quit the GUI
      quit = Button(root, text="Quit", command=root.destroy,width=5, bg="black",
      fg="white", font=("ariel", 16, " bold"))
      # placing the Quit button on the screen
      quit.place(x=700, y=50)

    # This method deselect the radio button on the screen
    # Then it is used to display the options available for the current question which we
      obtain through the question number and
    # Updates each of the options for the current question of the radio button.
    def displayOpt(self):
      val = 0
      # deselecting the options
      self.select.set(0)
      
      # looping over the options to be displayed for the
      # text of the radio buttons.
      for option in options[self.qNo]:
        self.opts[val]['text'] = option
        val += 1
        
    # This method shows the current Question on the screen
    def displayQ(self):
      # setting the Question properties
      qNo = Label(root, text=question[self.qNo], width=60, font=('ariel', 16, 'bold'),
      anchor='w')
      # placing the question on the screen
      qNo.place(x=70, y=100)

    # This method is used to Display Title
    def displayTitle(self):
      # The title to be shown
      title = Label(root, text="Quiz", width=50, bg="green", fg="white",

      font=("ariel", 20, "bold"))
      # place of the title on screen
      title.place(x=0, y=2)
      
    # Shows Radio buttons to select the Question on the screen at the specified
    position.
    # It also returns a LIST of radio button which are later used to add the options to
    them.
    def radioButtons(self):
      # initialize the list with an empty list of options
      qList = []
      # position of the first option
      y_pos = 150
      # adding the options to the list
      while len(qList) < 4:
        # setting the radio button properties
        radioBtn = Radiobutton(root, text=" ", variable=self.select, value=len(qList) +
        1, font=("ariel", 14))
        
        # adding the button to the list
        qList.append(radioBtn)
        
        # placing the button
        radioBtn.place(x=100, y=y_pos)
        
        # incrementing the y-axis position by 40
        y_pos += 40
      
    # return the radio buttons
    return qList

    # Create a GUI Window
    root = Tk()
    
    # set the size of the GUI Window
    root.geometry("800x450")
    
    # set the title of the Window
    root.title("Quiz")
    
    # get the data from the json file
    with open('data.json') as f:
      data = json.load(f)
    question = (data['question'])
    options = (data['options'])
    answer = (data['answer'])
   
   # create an object of the Quiz Class.

    quiz = Quiz()
    # Start the GUI
    root.mainloop()
